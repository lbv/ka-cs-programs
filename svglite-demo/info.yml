title: SVGLite Demo
description: >
  A demonstration program for SVGLite, a JavaScript
  implementation for a small subset of SVG, a standard format
  for describing vector graphics.
summary: |
  Ideally, something like this should not be necessary at all,
  because there are mechanisms that, at least in theory, are
  meant to be straightforward ways of rendering SVG data on a
  HTML canvas. These include the browser's own ability to
  render SVG images and then draw them on a canvas using the
  `drawImage` call, as well as some basic support for SVG
  shapes in Processing.JS via the `PShape` type.

  Unfortunately, both of these methods have their limitations.
  The standard HTML approach doesn't work too well in Google
  Chrome, for example, due to a strange bug that taints the
  canvas when rendering data from a dynamically generated
  `HTMLImage` element. On the other hand, using the `PShape`
  type from P.JS is unreliable, as some basic things (like
  e.g. the `fill-rule` attribute) are not supported; in
  addition, PShapes can't be rendered to an off-screen canvas.

  Because of this, I decided to simply implement the subset of
  the SVG standard that I was interested in, supporting the
  few things that I wanted in order to properly render some
  simple SVG files. Hence, SVGLite was created.

  It's very limited, as you'd imagine, but at least it helped
  me scratch my own itch :).

version: rev1
links:
  - desc : This program on Khan Academy
    url  : http://www.khanacademy.org/cs/
  - desc : This program on GitHub
    url  : https://github.com/lbv/ka-cs-programs/
  - desc : Snowflake art
    url  : http://openclipart.org/detail/100699/dark-blue-snowflakes-by-gem
  - desc : White dove art
    url  : http://openclipart.org/detail/176312/peace-dove-by-worker-176312
  - desc : Jimi Hendrix art
    url  : http://openclipart.org/detail/174372/jimi-by-caw-174372
todo:
  - Implement gradients, to be able to render some SVG icons.
  - Add widgets to control the demo.
  - Implement XML parsing.
